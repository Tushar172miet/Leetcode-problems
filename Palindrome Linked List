
struct ListNode* reverse(struct ListNode* head){
    struct ListNode* prev = NULL;
    struct ListNode* curr = head;
    while (curr != NULL){
        struct ListNode* nextNode = curr->next;
        curr->next = prev;
        prev = curr;
        curr = nextNode;
    }
    return prev;
}
bool isPalindrome(struct ListNode* head) {
    if (head == NULL || head->next == NULL)
        return true;  
    struct ListNode* slow = head;
    struct ListNode* fast = head;
    while (fast->next != NULL && 
    fast->next->next != NULL){
        slow = slow->next;
        fast = fast->next->next;


    }
    struct ListNode* secondHalf = reverse(slow->next);
    struct ListNode* firstHalf = head;
    struct ListNode* temp = secondHalf;
    bool palindrome = true;
    while (temp!= NULL) {
        if (firstHalf->val != temp->val){
            palindrome = false;
            break;
        }
        firstHalf = firstHalf->next;
        temp = temp->next;   

    }
    slow->next = reverse(secondHalf);
    return palindrome;    
}


